<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Private Cloud on HEIG-Cloud blog</title>
    <link>http://heig-cloud.github.io/tags/private-cloud/</link>
    <description>Recent content in Private Cloud on HEIG-Cloud blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Feb 2016 14:58:22 +0100</lastBuildDate>
    <atom:link href="http://heig-cloud.github.io/tags/private-cloud/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cloud Foundry</title>
      <link>http://heig-cloud.github.io/article/2016-02-15%20cloud-foundry/</link>
      <pubDate>Mon, 15 Feb 2016 14:58:22 +0100</pubDate>
      
      <guid>http://heig-cloud.github.io/article/2016-02-15%20cloud-foundry/</guid>
      <description>

&lt;h2 id=&#34;what-is-cloud-foundry:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;What is Cloud Foundry?&lt;/h2&gt;

&lt;p&gt;Cloud Foundry is a &lt;abbr title=&#34;Platform as a Service&#34;&gt;PaaS&lt;/abbr&gt; provider. It is currently developped by many groups, mainly Pivotal but also Swisscom. A PaaS allows developpers to deploy web application very quickly and painlessly. How painless? Well, not much more than one command, maybe two or three depending on the needs and the difficulty of the application. Say a user wants to push a JS app that only writes &amp;ldquo;Hello World&amp;rdquo;, here is how he does it on Cloud Foundry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf push app.js 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all, really. Once the user is logged, he only needs to make simple calls like this. How does he delete his app? Same thing really.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf delete app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only need thing you need is the &lt;a href=&#34;https://docs.cloudfoundry.org/devguide/cf-cli/&#34;&gt;cf-cli &lt;/a&gt; (cf meaning cloud foundry of course).&lt;/p&gt;

&lt;h3 id=&#34;why-use-a-paas:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;Why use a PaaS&lt;/h3&gt;

&lt;p&gt;A PaaS allows developpers to deploy web applications very easily, without the need to configure an environment (server, db, etc.). It takes care of creating routes, creates new instances when the load increases and it&amp;rsquo;s all transparent to the user. A few PaaS exists now, among them, Google App Engine, Cloud Foundry and Heroku. Cloud Foundry is open-source, and since it&amp;rsquo;s the only one, a lot of people and groups contribute to the project. There are now many providers, like Pivotal, IBM and even Swisscom. Just remember the following, a PaaS allows developpers to work subsequently faster.&lt;/p&gt;

&lt;h4 id=&#34;cloud-foundry:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;Cloud Foundry&lt;/h4&gt;

&lt;p&gt;You probably guessed it, we have deployed Cloud Foundry. There are a few (good) reasons for that. Let&amp;rsquo;s see how it&amp;rsquo;s possible to use CF and why it&amp;rsquo;s advantageous:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploying Cloud Foundry on a private cloud

&lt;ul&gt;
&lt;li&gt;You have full control over your CF deployment. You can make any arrangements necessary and your sensible data is safe.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deploying Cloud Foundry on a public cloud

&lt;ul&gt;
&lt;li&gt;You have a certain control over your deployment, mainly over the CF stack itself, you can change and tune things according to your needs.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deploying Cloud Foundry on an existing provider

&lt;ul&gt;
&lt;li&gt;You have the ability to deploy your apps on a tested and functional environment. You have minimal control over the deployment since you are nothing more than a simple user.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter the solution you pick, your code will work on either one of those, so you can avoid any vendor lock you would have otherwise. This is one of the main reasons why CF is so appreciated and used.&lt;/p&gt;

&lt;h3 id=&#34;what-we-want-from-it:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;What we want from it?&lt;/h3&gt;

&lt;p&gt;This CF deployment could allow students to work with it, to test their web apps. At the moment, they learn to work with Heroku, which is also a powerful well-known PaaS but as previously stated, is vendor specific. It becomes quite hard to change things or to be compatible with other technologies.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also a good way to test our OpenStack deployment, as CF needs some very specific configuration to work on top of it. We now have a PaaS and a spark cluster on top of our private cloud, plus a fair number of instances, with various applications installed.&lt;/p&gt;

&lt;h3 id=&#34;how-to-deploy-cloud-foundry:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;How to deploy Cloud Foundry?&lt;/h3&gt;

&lt;p&gt;There are a few ways to deploy it, the most used one is to use &lt;a href=&#34;https://bosh.io/&#34;&gt;BOSH&lt;/a&gt;. BOSH is used to deploy distibuted systems, you give it a deployment manifest and it will create your machine. In a classical BOSH CF deployment, there are two phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating the director with BOSH&lt;/li&gt;
&lt;li&gt;Creating the CF architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both theses steps require a manifest file that will be used to create the instances. The manifest will define the state of each host and how it should be configured. Let&amp;rsquo;s take a look at the director first.&lt;/p&gt;

&lt;h4 id=&#34;deploy-the-director-with-bosh:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;Deploy the director with BOSH&lt;/h4&gt;

&lt;p&gt;A cloud foundry deployment usually comes in &amp;ldquo;two&amp;rdquo; parts, the director and the CF VMs. The director is the VM responsible for the creation of the CF cluster. When new machines need to be added, changes in the configuration or updates need to be made, the director is responsible for it.&lt;/p&gt;

&lt;p&gt;The second part, which we will see more in details after, is composed of all the machines included in the CF cluster.&lt;/p&gt;

&lt;p&gt;To deploy the director on OpenStack, you will need to follow these steps, from the bosh website: &lt;a href=&#34;https://bosh.io/docs/init-openstack.html&#34;&gt;Initialize a BOSH environment on OpenStack&lt;/a&gt;. There are a few needed steps, like creating a keypair and a few security groups, then you need to create a manifest.&lt;/p&gt;

&lt;p&gt;After creating the manifest, the director should be deployed on your OpenStack project. The manifest looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
name: bosh

releases:
- name: bosh
  url: https://bosh.io/d/github.com/cloudfoundry/bosh?v=253
  sha1: 940956a23b642af3bb24b3cac37c4da746d6f9a9
- name: bosh-openstack-cpi
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/bosh-openstack-cpi-release?v=21
  sha1: f28d30f0e20acbbf346f8d3fafcef05e3850c3d5

resource_pools:
- name: vms
  network: private
  stemcell:
    url: https://bosh.io/d/stemcells/bosh-openstack-kvm-ubuntu-trusty-go_agent?v=3012
    sha1: e92f3bd5081301652005bdc3dd11bff545a304ef
  cloud_properties:
    instance_type: m1.xlarge

disk_pools:
- name: disks
  disk_size: 20_000

networks:
- name: private
  type: manual
  subnets:
  - range: PRIVATE-CIDR # &amp;lt;--- Replace with a private subnet CIDR
    gateway: PRIVATE-GATEWAY-IP # &amp;lt;--- Replace with a private subnet&#39;s gateway
    dns: [DNS-IP] # &amp;lt;--- Replace with your DNS
    cloud_properties: {net_id: NETWORK-UUID} # &amp;lt;--- # Replace with private network UUID
- name: public
  type: vip

jobs:
- name: bosh
  instances: 1

  templates:
  - {name: nats, release: bosh}
  - {name: redis, release: bosh}
  - {name: postgres, release: bosh}
  - {name: blobstore, release: bosh}
  - {name: director, release: bosh}
  - {name: health_monitor, release: bosh}
  - {name: registry, release: bosh}
  - {name: openstack_cpi, release: bosh-openstack-cpi}

  resource_pool: vms
  persistent_disk_pool: disks

  networks:
  - name: private
    static_ips: [PRIVATE-IP] # &amp;lt;--- Replace with a private IP
    default: [dns, gateway]
  - name: public
    static_ips: [FLOATING-IP] # &amp;lt;--- Replace with a floating IP

  properties:
    nats:
      address: 127.0.0.1
      user: nats
      password: nats-password

    redis:
      listen_address: 127.0.0.1
      address: 127.0.0.1
      password: redis-password

    postgres: &amp;amp;db
      listen_address: 127.0.0.1
      host: 127.0.0.1
      user: postgres
      password: postgres-password
      database: bosh
      adapter: postgres

    registry:
      address: PRIVATE-IP # &amp;lt;--- Replace with a private IP
      host: PRIVATE-IP # &amp;lt;--- Replace with a private IP
      db: *db
      http: {user: admin, password: admin, port: 25777}
      username: admin
      password: admin
      port: 25777

    blobstore:
      address: PRIVATE-IP # &amp;lt;--- Replace with a private IP
      port: 25250
      provider: dav
      director: {user: director, password: director-password}
      agent: {user: agent, password: agent-password}

    director:
      address: 127.0.0.1
      name: my-bosh
      db: *db
      cpi_job: openstack_cpi
      max_threads: 3
      user_management:
        provider: local
        local:
          users:
          - {name: admin, password: admin}
          - {name: hm, password: hm-password}

    hm:
      director_account: {user: hm, password: hm-password}
      resurrector_enabled: true

    openstack: &amp;amp;openstack
      auth_url: IDENTITY-API-ENDPOINT # &amp;lt;--- Replace with OpenStack Identity API endpoint
      tenant: OPENSTACK-TENANT # &amp;lt;--- Replace with OpenStack tenant name
      username: OPENSTACK-USERNAME # &amp;lt;--- Replace with OpenStack username
      api_key: OPENSTACK-PASSWORD # &amp;lt;--- Replace with OpenStack password
      default_key_name: bosh
      default_security_groups: [bosh]

    agent: {mbus: &amp;quot;nats://nats:nats-password@PRIVATE-IP:4222&amp;quot;} # &amp;lt;--- Replace with a private IP

    ntp: &amp;amp;ntp [0.pool.ntp.org, 1.pool.ntp.org]

cloud_provider:
  template: {name: openstack_cpi, release: bosh-openstack-cpi}

  ssh_tunnel:
    host: FLOATING-IP # &amp;lt;--- Replace with a floating IP
    port: 22
    user: vcap
    private_key: ./bosh.pem # Path relative to this manifest file

  mbus: &amp;quot;https://mbus:mbus-password@FLOATING-IP:6868&amp;quot; # &amp;lt;--- Replace with a floating IP

  properties:
    openstack: *openstack
    agent: {mbus: &amp;quot;https://mbus:mbus-password@0.0.0.0:6868&amp;quot;}
    blobstore: {provider: local, path: /var/vcap/micro_bosh/data/cache}
    ntp: *ntp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can initialize the manifest like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bosh-init deploy bosh.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need the &lt;a href=&#34;https://bosh.io/docs/install-bosh-init.html&#34;&gt;bosh-init cli&lt;/a&gt; to do this.&lt;/p&gt;

&lt;h4 id=&#34;deploy-cf:3b5fec49f84e5d5cfa51d881c4db4598&#34;&gt;Deploy CF&lt;/h4&gt;

&lt;p&gt;The following image shows a basical deployment of CF: &lt;a href=&#34;https://bosh.io/docs/init-openstack.html&#34;&gt;bootstrap the environment on OpenStack&lt;/a&gt;. There are different guides depending on your IaaS (AWS, OpenStack vSphere, etc.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://heig-cloud.github.io/static/img/2016-02-15 cloud_foundry/cf_architecture.png&#34; alt=&#34;CF Architecture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy OpenStack</title>
      <link>http://heig-cloud.github.io/article/2015-12-15%20openstack_deployment/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://heig-cloud.github.io/article/2015-12-15%20openstack_deployment/</guid>
      <description>

&lt;h2 id=&#34;how-to-deploy-openstack:6edb1a0cfe65e6967cfa8690bfb1a8f5&#34;&gt;How to deploy OpenStack&lt;/h2&gt;

&lt;p&gt;Deploying OpenStack, or any cloud middleware for that matter, is no
piece of cake. OpenStack consists of many many moving parts that need
to be carefully configured to work correctly. (To give you an idea of
the number of components and their interrelations we have reproduced
below the diagram of the logical architecture from the
&lt;a href=&#34;http://docs.openstack.org/admin-guide-cloud/common/get_started_logical_architecture.html&#34;&gt;official OpenStack documentation&lt;/a&gt;.)
On top of that each cloud deployment is different: different number of
servers to deploy on, different network topologies, different
integration points with existing sytesm, and so on. The complexity of
the configuration far exceeds the capabilities of regular Linux
package managers like APT and YUM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://heig-cloud.github.io/static/img/2015-12-15 openstack_deployment/openstack-arch-kilo-logical-v1.png&#34; alt=&#34;OpenStack Kilo logical architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So is it possible to tame this complexity? One has to decide between
two main approaches to installing OpenStack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install manually by following the 150+ page
&lt;a href=&#34;http://docs.openstack.org/kilo/install-guide/install/apt/content/&#34;&gt;OpenStack Installation Guide&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use a configuration management tool like Puppet, Chef or Ansible and
use ready-made scripts to automate the installation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The manual install will be a lot of work. There is a non-negligible
risk of making errors. The installation effort needs to be repated for
every machine. Let&amp;rsquo;s say you want to dedicate ten servers to the
compute component that provides virtual machines. You would have to
repeat ten times the installation of the compute component.&lt;/p&gt;

&lt;p&gt;The automated install reduces the chances of making errors as you are
relying on scripts developed and tested by somebody else. Repeating
the installation, once it is working, on nine more machines is a
breeze. However a considerable manual effort is still needed to
customize the deployment scripts to your particular situation. To be
able to do that, and to be able to troubleshoot any installation
problems that are likely to occur, you need to become familiar with
the configuration management tool.&lt;/p&gt;

&lt;p&gt;So it worth learning a configuration management tool? We think in the
case of OpenStack, the answer is yes.&lt;/p&gt;

&lt;p&gt;Among the most widely used configuration management tools
&lt;a href=&#34;http://ansible.com&#34;&gt;Ansible&lt;/a&gt; is the least complex one. It is
relatively easy to learn. It is also easyer to deploy as the
competition, as it does not need the setup of a central
server. Instead configuration scripts are pushed from your local
workstation to the machines that need to be configured.&lt;/p&gt;

&lt;p&gt;RackSpace, one of the bigger cloud service providers, has developed an
OpenStack deployment solution based on Ansible that is now officialy
part of the OpenStack project:
&lt;a href=&#34;https://github.com/openstack/openstack-ansible&#34;&gt;openstack-ansible&lt;/a&gt;. This
is our starting base to create a private cloud at HEIG-VD. More on
that in an upcoming blog post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating your own private cloud</title>
      <link>http://heig-cloud.github.io/article/2015-12-14%20private_cloud/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://heig-cloud.github.io/article/2015-12-14%20private_cloud/</guid>
      <description>

&lt;h2 id=&#34;creating-your-own-private-cloud:365f7f745395937a012ca0f9a668a231&#34;&gt;Creating your own private cloud&lt;/h2&gt;

&lt;p&gt;One of the reasons why Cloud Computing has been such a success is that
it &lt;em&gt;automates&lt;/em&gt; many tasks that previously had to be done manually by
system administrators. Take the provisioning of a server to run a web
application. Traditionally this takes several weeks (ordering,
delivering, installing, configuring, &amp;hellip;) while a virtual machine in
the cloud is provisioned with a few clicks and available in two
minutes. This automation, coupled with economies of scale through
immense data centers, is what allows companies like Amazon or
Microsoft to offer cloud services at very low cost. Much cheaper than
what a typical company pays to run its own traditional IT
infrastructure.&lt;/p&gt;

&lt;p&gt;Now there are many companies that shy away from public cloud offerings
like AWS and Azure because the data they work with is sensitive. Think
of banks, anybody providing health services like hospitals, or even
schools that need to keep personal data which is protected by privacy
laws. Sometimes using public cloud services has to be ruled out
because there are not enough assurances that the data will be kept
safe. In these cases one can still reap the benefits of cloud
automation by running a &lt;em&gt;private cloud&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To run a private cloud one needs the servers and the cloud
software. For the latter, there basically two options: commercial
software or Open Source
software. &lt;a href=&#34;https://www.vmware.com/cloud-computing/overview&#34;&gt;VMware&lt;/a&gt;
dominates the commercial cloud segment. Its software is seen as very
solid, well documented, but also quite pricey. In the Open Source
segment two projects dominate: &lt;a href=&#34;https://www.openstack.org&#34;&gt;OpenStack&lt;/a&gt;
and &lt;a href=&#34;https://cloudstack.apache.org&#34;&gt;Apache CloudStack&lt;/a&gt;. OpenStack is
very widely used, offers a wide range of functionalities, but has a
(deserved)
&lt;a href=&#34;https://ask.openstack.org/en/question/58965/have-you-ever-experienced-anything-worse-than-openstack/&#34;&gt;reputation to be difficult to install and run&lt;/a&gt;. CloudStack
is
&lt;a href=&#34;https://www.getfilecloud.com/blog/2014/02/a-game-of-stacks-openstack-vs-cloudstack/#.VtWc58e75OM&#34;&gt;easier to use&lt;/a&gt;,
but focuses on the core IaaS services: compute, storage and
networking. OpenStack&amp;rsquo;s scope is broader and it offers more
flexibility. Uptake of CloudStack is less than OpenStack&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;We at HEIG-VD have deployed a private cloud for research and teaching
based on OpenStack. In upcoming blog postings we will talk about our
experiences, good and bad, with OpenStack.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>